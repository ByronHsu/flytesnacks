# %% [markdown]
# # FlyIn Vscode Decorator
#
# @vscode simplifies converting a Python task into a Visual Studio Code server, 
# enabling connection and debugging in remote environments. 
# It supports installing various extensions for development assistance, 
# including Copilot, Python, or Jupyter.
# FlyIn enhances this by automatically generating scripts for task execution, 
# using inputs from previous tasks or resuming with updated code.
# Additionally, FlyIn offers numerous advanced features,
# as detailed in the "Advanced Usage" section.

# %%
from flytekit import task
from flytekitplugins.flyin import vscode, workflow

# %% [markdown]
# ## 1. Adding vscode decorator

# %%
@task
@vscode
def train():
    print("forward")
    print("backward")

@workflow
def wf_train():
    train()

# %% [markdown]
# The @vscode decorator, when applied, converts a task into a Visual Studio Code server during runtime. This process overrides the standard execution of the task's function body, initiating a command to start a Visual Studio Code server in advance.
# ## 2. Connecting to the VSCode Server
# You have two methods for connecting:
# 1. **(Recommended)** Set up ingress on the backend to expose a URL on the Flyte console. Details are to be determined (TBD).

# 2. **Use Port-Forwarding:** Execute the command:
#    ```
#    $ kubectl port-forward <pod name> <port>
#    ```
#    Then, open a browser and navigate to `localhost:port`. You will be presented with the interface as shown in the image below.

# ## 3. Interactively Debugging Task
#
# To run the task in VSCode, select "Run and debug" from the left panel and execute the "interactive debugging" configuration. This will run your task with inputs from the previous task. It's important to note that the task runs entirely within VSCode and does not write the output to Flyte storage.
#
# For inspecting intermediate states, set breakpoints in the Python code and use the debugger for tracing.
#
# The `launch.json` file generated by FlyIn simply offers a convenient method to run the task. You can still use VSCode as you would locally. For instance, you can run a Python script directly from the embedded terminal using `python hello.py`.

